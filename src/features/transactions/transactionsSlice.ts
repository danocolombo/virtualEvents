import { createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '@/store';
import { TransactionType } from '@/types';
import { loadTransactionsAsync } from './transactionsThunks';
export interface TransactionsState {
    items: TransactionType[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: TransactionsState = {
    items: [],
    status: 'idle',
};

export const transactionsSlice = createSlice({
    name: 'transactions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        logout: (state) => {
            state.items = [];
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loadTransactionsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(loadTransactionsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.items = action.payload;
            })
            .addCase(loadTransactionsAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const { logout } = transactionsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getTransactions = (state: RootState) => state.transactions.items;
export const getTransactionsState = (state: RootState) => state.transactions;

export default transactionsSlice.reducer;
